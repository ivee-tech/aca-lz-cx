## Azure DevOps Pipeline: Deploy new revision of Planets Backend Container App
## --------------------------------------------------------------------------
# Triggers when the build pipeline for planets backend finishes (pipeline resource)
# and/or can be run manually providing an image tag or digest. Updates the existing
# Container App with a new revision using the ACR image. Supports tag or digest-based
# immutable deployments and optional traffic weighting when multiple revisions mode.

trigger: none  # Deployment is event or manually triggered (see resources below)

resources:
  pipelines:
    - pipeline: planetsBackendBuild          # Alias inside this YAML
      source: planets-backend-ci          # Name of the build pipeline that produces/pushes the image
      branch: main
      trigger: true                          # Enable automatic deploy after successful build

parameters:
  - name: imageTag
    displayName: Image tag to deploy (ignored if useDigest = true). Leave as N/A to use build output tag.
    type: string
    default: 'N/A'
  - name: useDigest
    displayName: Use immutable image digest instead of tag
    type: boolean
    default: true
  - name: imageDigest
    displayName: Explicit image digest (sha256:...) override (leave as N/A to auto-resolve from build artifact)
    type: string
    default: 'N/A'
  - name: trafficWeight
    displayName: Traffic weight (0-100) for NEW revision (multi-revision only). 100 = full cutover.
    type: number
    default: 100
  - name: forceMultipleRevisions
    displayName: Force Container App to multiple revision mode before traffic assignment
    type: boolean
    default: false

variables:
  # Core identifiers (adjust to your environment)
  acrName: 'crnascmieoldevaue'
  repository: 'planets-backend'
  resourceGroup: 'rg-nasc-spoke-dev-001'          # TODO: set your RG
  containerAppName: 'ca-nasc-planets-api'   # TODO: set your Container App name
  azureSubscription: 'SC-ACA'               # Service connection name
  acrLoginServer: '$(acrName).azurecr.io'

  # Derived build metadata (fallback when run manually)
  shortSha: $[ substring(variables['Build.SourceVersion'], 0, 7) ]
  runId: '$(Build.BuildId)'
  revisionSuffix: 'r-$(shortSha)-$(runId)'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - template: templates/stage-containerapp-deploy.yml
    parameters:
      stageName: Deploy
      stageDisplayName: Deploy Planets Backend Revision
      jobName: DeployRevision
      jobDisplayName: Update Container App Image
      buildPipelineAlias: 'planetsBackendBuild'
      azureSubscription: '$(azureSubscription)'
      useDigest: ${{ parameters.useDigest }}
      imageDigest: ${{ parameters.imageDigest }}
      imageTag: ${{ parameters.imageTag }}
      trafficWeight: ${{ parameters.trafficWeight }}
      forceMultipleRevisions: ${{ parameters.forceMultipleRevisions }}

# Notes:
# - Ensure the build pipeline publishes image-metadata artifact with digest (template already does this).
# - If you rename the build pipeline, update resources.pipelines.source accordingly.
# - Set variable 'forceMultipleRevisions' to true if you want to maintain previous revisions and shift traffic gradually.
# - For production, consider adding approvals via DevOps Environments and integrating smoke tests or rollback logic.
