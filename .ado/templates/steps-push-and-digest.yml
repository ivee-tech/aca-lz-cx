# Template: Push image & capture digest
# Parameters:
#   repository
#   tags (multiline string, first tag assumed canonical for digest capture)
#   imageRefForDigest (repository:tag used to inspect)
#   acrLoginServer

parameters:
  - name: repository
    type: string
  - name: tags
    type: string
  - name: imageRefForDigest
    type: string
  - name: acrLoginServer
    type: string

steps:
  - script: |
      set -e
      echo "Tagging & pushing image(s) to ${{ parameters.acrLoginServer }}"
      echo "Tags list:" 
      REPO='${{ parameters.repository }}'
      LOGIN='${{ parameters.acrLoginServer }}'
      PRIMARY="$(printf "%s" "${{ parameters.tags }}" | head -1)"
      if [ -z "$PRIMARY" ]; then
        echo "No tags provided; aborting push." >&2
        exit 1
      fi
      # Loop through tags
      printf "%s" "${{ parameters.tags }}" | while read -r t; do
        [ -z "$t" ] && continue
        echo "Processing tag: $t"
        # Create registry-qualified tag
        docker tag "$REPO:$t" "$LOGIN/$REPO:$t"
        docker push "$LOGIN/$REPO:$t"
      done
    displayName: 'Push image tags (manual)'

  - script: |
      echo "Pushed image references:" 
      printf "%s" "${{ parameters.tags }}" | while read -r tag; do
        [ -z "$tag" ] && continue
        echo "  ${{ parameters.acrLoginServer }}/${{ parameters.repository }}:$tag"
      done
    displayName: 'Summarize image'

  - script: |
      set -e
      # Use primary tag (first tag) for digest capture
      PRIMARY="$(printf "%s" "${{ parameters.tags }}" | head -1)"
      if [ -z "$PRIMARY" ]; then
        echo "No primary tag found for digest capture" >&2
        exit 1
      fi
      TARGET="${{ parameters.acrLoginServer }}/${{ parameters.repository }}:$PRIMARY"
      echo "Capturing digest for $TARGET"
      DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$TARGET" | awk -F'@' '{print $2}')
      if [ -z "$DIGEST" ]; then
        echo "Failed to obtain digest for $TARGET" >&2
        docker inspect "$TARGET" || true
        exit 1
      fi
      echo "imageDigest=$DIGEST" > image-metadata.txt
      echo "##vso[task.setvariable variable=imageDigest;isOutput=true]$DIGEST"
      echo "Image digest: $DIGEST"
    displayName: 'Capture image digest'
    name: captureDigest

  - publish: image-metadata.txt
    artifact: image-metadata
    displayName: 'Publish image metadata artifact'
